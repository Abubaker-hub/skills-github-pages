The os module in Python provides a portable way to interact with the operating system. It offers a wide range of functions for performing tasks related to file systems, processes, and environment variables, abstracting away the differences between various operating systems like Windows, macOS, and Linux.
Key functionalities provided by the os module include:
File and Directory Operations:
Creating, deleting, renaming, and moving files and directories (os.mkdir(), os.remove(), os.rename(), os.makedirs(), os.rmdir()).
Listing directory contents (os.listdir()).
Changing the current working directory (os.chdir()).
Getting the current working directory (os.getcwd()).
Checking if a path exists, is a file, or is a directory using os.path submodule functions like os.path.exists(), os.path.isfile(), os.path.isdir().
Process Management:
Executing shell commands (os.system()).
Spawning new processes (os.spawn*() functions).
Getting the process ID (os.getpid()).
Environment Variables:
Accessing and modifying environment variables through os.environ.
Path Manipulation:
The os.path submodule provides functions for manipulating pathnames, such as joining paths (os.path.join()), splitting paths (os.path.split()), and getting the base name or directory name of a path (os.path.basename(), os.path.dirname()).
Example Usage:
Python

import os

# Get the current working directory
current_directory = os.getcwd()
print(f"Current working directory: {current_directory}")

# List files and directories in the current directory
print("Contents of current directory:")
for item in os.listdir(current_directory):
    print(item)

# Create a new directory
try:
    os.mkdir("new_directory")
    print("Directory 'new_directory' created successfully.")
except FileExistsError:
    print("Directory 'new_directory' already exists.")

# Remove the created directory
# os.rmdir("new_directory") # Uncomment to remove
















